def runQualityTests() {
    sshagent(credentials: ['jenkins-worker'], ignoreMissing: true) {
        // Determine git refspec, branch, and clone type
        git_shallow_clone = true
        if (env.ghprbActualCommit) {
            if (SHARD == "4") {
                git_shallow_clone = false
                git_branch_maps = [[name: "${ghprbActualCommit}"], [name: 'master']]
                refspec = "+refs/heads/master:refs/remotes/origin/master +refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/*"
            } else {
                git_branch_maps = [[name: "${ghprbActualCommit}"]]
                refspec = "+refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/*"
            }
        } else {
            git_branch_maps = [[name: 'master']]
            refspec = "+refs/heads/master:refs/remotes/origin/master"
        }

        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: git_branch_maps,
            doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', honorRefspec: true,
            noTags: true, shallow: git_shallow_clone ]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-worker',
            refspec: refspec,
            url: 'git@github.com:edx/edx-platform.git']]]

        sh "bash scripts/all-tests.sh"
        stash includes: '**/reports/**/*, **/reports/**/*', name: "${TEST_SUITE}-${SHARD}-reports"
    }
}

def qualityTestCleanup() {
    archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/**/*,test_root/log/**/*.log,*.log'
    junit '**/reports/quality.xml, reports/quality_junitxml/*.xml'
}

pipeline {
    agent { label "jenkins-worker" }
    options {
        timestamps()
        timeout(60)
    }
    stages {
        stage('Mark build as pending on Github') {
            when {
                 // Only run github-build-status for master builds
                 expression { env.ghprbActualCommit == null }
            }
            steps {
                script {
                    commit_sha = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    build job: 'github-build-status', parameters: [string(name: 'GIT_SHA', value: commit_sha),
                        string(name: 'GITHUB_ORG', value: 'edx'), string(name: 'GITHUB_REPO', value: 'edx-platform'),
                        string(name: 'TARGET_URL', value: "https://build.testeng.edx.org/job/${JOB_NAME}/${BUILD_NUMBER}/"),
                        string(name: 'DESCRIPTION', value: 'Pending'), string(name: 'CONTEXT', value: 'jenkins/quality-master-pipe'),
                        string(name: 'CREATE_DEPLOYMENT', value: 'false'), string(name: 'BUILD_STATUS', value: 'pending')],
                        propagate: false, wait: false
                }
            }
        }
        stage('Run Tests') {
            parallel {
                stage("commonlib pylint") {
                    agent { label "jenkins-worker" }
                    environment {
                        TEST_SUITE = "quality"
                        SHARD = 1
                    }
                    steps {
                        script {
                            runQualityTests()
                        }
                    }
                    post {
                        always {
                            script {
                                qualityTestCleanup()
                            }
                        }
                    }
                }
                stage("lms pylint") {
                    agent { label "jenkins-worker" }
                    environment {
                        TEST_SUITE = "quality"
                        SHARD = 2
                    }
                    steps {
                        script {
                            runQualityTests()
                        }
                    }
                    post {
                        always {
                            script {
                                qualityTestCleanup()
                            }
                        }
                    }
                }
                stage("cms/openedx/pavelib pylint") {
                    agent { label "jenkins-worker" }
                    environment {
                        TEST_SUITE = "quality"
                        SHARD = 3
                    }
                    steps {
                        script {
                            runQualityTests()
                        }
                    }
                    post {
                        always {
                            script {
                                qualityTestCleanup()
                            }
                        }
                    }
                }
                stage("Other quality checks") {
                    agent { label "jenkins-worker" }
                    environment {
                        TEST_SUITE = "quality"
                        SHARD = 4
                    }
                    steps {
                        script {
                            runQualityTests()
                        }
                    }
                    post {
                        always {
                            script {
                                qualityTestCleanup()
                            }
                        }
                    }
                }
            }
        }
        stage('Diff quality') {
            when {
                // Only run diff quality on PR builds
                 expression { env.ghprbTargetBranch != null }
            }
            environment {
                TARGET_BRANCH = "origin/${ghprbTargetBranch}"
            }
            steps {
                sshagent(credentials: ['jenkins-worker'], ignoreMissing: true) {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${ghprbActualCommit}"], [name: "${ghprbTargetBranch}"]],
                        doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption',
                        honorRefspec: true, noTags: true, shallow: false]], submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'jenkins-worker',
                        refspec: "+refs/heads/${ghprbTargetBranch}:refs/remotes/origin/${ghprbTargetBranch} +refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/*",
                        url: 'git@github.com:edx/edx-platform.git']]]
                    unstash 'quality-1-reports'
                    unstash 'quality-2-reports'
                    unstash 'quality-3-reports'
                    unstash 'quality-4-reports'
                    sh "./scripts/jenkins-quality-diff.sh"
                }
            }
            post {
                always {
                    qualityTestCleanup()
                    publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports/diff_quality',
                        reportFiles: 'diff_quality_pylint.html, diff_quality_eslint.html', reportName: 'Diff Quality Report', reportTitles: ''])
                }
            }
        }
    }
    post {
        always {
            unstash 'quality-1-reports'
            unstash 'quality-2-reports'
            unstash 'quality-3-reports'
            unstash 'quality-4-reports'
            // Check for warnings
            warnings canComputeNew: false, canResolveRelativePaths: false, canRunOnFailed: true, categoriesPattern: '',
                defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '',
                parserConfigurations: [[parserName: 'Pep8', pattern: 'reports/pep8/pep8.report'], [parserName: 'Pep8', pattern: 'reports/**/pylint.report']],
                unHealthy: ''
            // Publish Quality report
            publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true,
                reportDir: 'reports/metrics/',
                reportFiles: 'pylint/*view*/,pep8/*view*/,python_complexity/*view*/,xsscommitlint/*view*/,xsslint/*view*/,eslint/*view*/',
                reportName: 'Quality Report', reportTitles: ''])

            script{
                if (env.ghprbPullId != null) {
                    // For PR jobs, run the edx-platform-test-notifier for PR reporting
                    build job: 'edx-platform-test-notifier', parameters: [string(name: 'PR_NUMBER', value: "${ghprbPullId}")], wait: false
                } else {
                    // For master jobs run github-build-status and report to slack when necessary
                    if (currentBuild.currentResult == "SUCCESS") {
                        create_deployment = "true"
                        build_status = "success"
                        build_description = "Build Passed"
                    }
                    else {
                        create_deployment = "false"
                        build_status = "failure"
                        build_description = "Build Failed"
                    }

                    commit_sha = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    build job: 'github-build-status', parameters: [string(name: 'GIT_SHA', value: commit_sha),
                        string(name: 'GITHUB_ORG', value: 'edx'), string(name: 'GITHUB_REPO', value: 'edx-platform'),
                        string(name: 'TARGET_URL', value: "https://build.testeng.edx.org/job/${JOB_NAME}/${BUILD_NUMBER}/"),
                        string(name: 'DESCRIPTION', value: build_description), string(name: 'CONTEXT', value: 'jenkins/quality-master-pipe'),
                        string(name: 'CREATE_DEPLOYMENT', value: create_deployment), string(name: 'BUILD_STATUS', value: build_status)],
                        propagate: false, wait: false
                    if (["ABORTED", "FAILURE", "UNSTABLE", "FIXED"].contains(currentBuild.currentResult)){
                        slackSend "${currentBuild.currentResult}: `${JOB_NAME}` #${BUILD_NUMBER}:\n${BUILD_URL}"
                    }
                }
            }
        }
    }
}
